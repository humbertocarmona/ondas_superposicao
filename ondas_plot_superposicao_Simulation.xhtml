<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title></title>
    <link rel="stylesheet"  type="text/css" href="library/css/ejss.css" />
    <script src="library/scripts/common_script.js"></script>
    <script src="library/scripts/textresizedetector.js"></script>
    <script src="library/ejsS.v1.min.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function ondas_plot_superposicao(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); } 
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var functionString; // EjsS Model.Variables.Var Table.functionString
  var functionString2; // EjsS Model.Variables.Var Table.functionString2
  var n; // EjsS Model.Variables.Var Table.n
  var xmin; // EjsS Model.Variables.Var Table.xmin
  var xmax; // EjsS Model.Variables.Var Table.xmax
  var t; // EjsS Model.Variables.Var Table.t
  var dx; // EjsS Model.Variables.Var Table.dx
  var x1; // EjsS Model.Variables.Var Table.x1
  var y1; // EjsS Model.Variables.Var Table.y1
  var ly1; // EjsS Model.Variables.Var Table.ly1
  var lx1; // EjsS Model.Variables.Var Table.lx1
  var x2; // EjsS Model.Variables.Var Table.x2
  var y2; // EjsS Model.Variables.Var Table.y2
  var ly2; // EjsS Model.Variables.Var Table.ly2
  var lx2; // EjsS Model.Variables.Var Table.lx2
  var x; // EjsS Model.Variables.Var Table.x
  var y; // EjsS Model.Variables.Var Table.y
  var ly; // EjsS Model.Variables.Var Table.ly
  var lx; // EjsS Model.Variables.Var Table.lx

  _model.getOdes = function() { return []; };

  _model.removeEvents = function(){
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      functionString : functionString,
      functionString2 : functionString2,
      n : n,
      xmin : xmin,
      xmax : xmax,
      t : t,
      dx : dx,
      x1 : x1,
      y1 : y1,
      ly1 : ly1,
      lx1 : lx1,
      x2 : x2,
      y2 : y2,
      ly2 : ly2,
      lx2 : lx2,
      x : x,
      y : y,
      ly : ly,
      lx : lx
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      functionString : functionString,
      functionString2 : functionString2,
      n : n,
      xmin : xmin,
      xmax : xmax,
      t : t,
      dx : dx,
      x1 : x1,
      y1 : y1,
      ly1 : ly1,
      lx1 : lx1,
      x2 : x2,
      y2 : y2,
      ly2 : ly2,
      lx2 : lx2,
      x : x,
      y : y,
      ly : ly,
      lx : lx
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.functionString != "undefined") functionString = json.functionString;
    if(typeof json.functionString2 != "undefined") functionString2 = json.functionString2;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dx != "undefined") dx = json.dx;
    if(typeof json.x1 != "undefined") x1 = json.x1;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.ly1 != "undefined") ly1 = json.ly1;
    if(typeof json.lx1 != "undefined") lx1 = json.lx1;
    if(typeof json.x2 != "undefined") x2 = json.x2;
    if(typeof json.y2 != "undefined") y2 = json.y2;
    if(typeof json.ly2 != "undefined") ly2 = json.ly2;
    if(typeof json.lx2 != "undefined") lx2 = json.lx2;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.ly != "undefined") ly = json.ly;
    if(typeof json.lx != "undefined") lx = json.lx;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.functionString != "undefined") functionString = json.functionString;
    if(typeof json.functionString2 != "undefined") functionString2 = json.functionString2;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dx != "undefined") dx = json.dx;
    if(typeof json.x1 != "undefined") x1 = json.x1;
    if(typeof json.y1 != "undefined") y1 = json.y1;
    if(typeof json.ly1 != "undefined") ly1 = json.ly1;
    if(typeof json.lx1 != "undefined") lx1 = json.lx1;
    if(typeof json.x2 != "undefined") x2 = json.x2;
    if(typeof json.y2 != "undefined") y2 = json.y2;
    if(typeof json.ly2 != "undefined") ly2 = json.ly2;
    if(typeof json.lx2 != "undefined") lx2 = json.lx2;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.ly != "undefined") ly = json.ly;
    if(typeof json.lx != "undefined") lx = json.lx;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["Evol Page"] = true;
  });

  _model.addToReset(function() {
    functionString = "3*exp(-(x-2*t)^2/4)"; // EjsS Model.Variables.Var Table.functionString
    functionString2 = "3*exp(-(x+2*t-10)^2/4)"; // EjsS Model.Variables.Var Table.functionString2
    n = 500; // EjsS Model.Variables.Var Table.n
    xmin = -5; // EjsS Model.Variables.Var Table.xmin
    xmax = 20.0; // EjsS Model.Variables.Var Table.xmax
    t = 0; // EjsS Model.Variables.Var Table.t
    dx = (xmax-xmin)/(n-1);; // EjsS Model.Variables.Var Table.dx
    x1 = new Array(n); // EjsS Model.Variables.Var Table.x1
    y1 = new Array(n); // EjsS Model.Variables.Var Table.y1
    ly1 = new Array(n-1); // EjsS Model.Variables.Var Table.ly1
    lx1 = new Array(n-1); // EjsS Model.Variables.Var Table.lx1
    x2 = new Array(n); // EjsS Model.Variables.Var Table.x2
    y2 = new Array(n); // EjsS Model.Variables.Var Table.y2
    ly2 = new Array(n-1); // EjsS Model.Variables.Var Table.ly2
    lx2 = new Array(n-1); // EjsS Model.Variables.Var Table.lx2
    x = new Array(n); // EjsS Model.Variables.Var Table.x
    y = new Array(n); // EjsS Model.Variables.Var Table.y
    ly = new Array(n-1); // EjsS Model.Variables.Var Table.ly
    lx = new Array(n-1); // EjsS Model.Variables.Var Table.lx
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(1);
  });

  function updatefunc(){  // > CustomCode.updatefunc:1
    for(var i=0; i<n; i++) {  // > CustomCode.updatefunc:2
        x1[i] =  xmin+i*dx;  // > CustomCode.updatefunc:3
        y1[i] = _view.functionField.evaluate( {"x":x1[i], "t":t} );  // > CustomCode.updatefunc:4
        x2[i] =  xmin+i*dx;  // > CustomCode.updatefunc:5
        y2[i] = _view.functionField2.evaluate( {"x":x2[i], "t":t} );  // > CustomCode.updatefunc:6
        x[i] = x1[i]  // > CustomCode.updatefunc:7
        y[i] = y1[i] + y2[i]  // > CustomCode.updatefunc:8
    }  // > CustomCode.updatefunc:9
    for(var i=0; i<n-1; i++) {  // > CustomCode.updatefunc:10
      lx1[i] = dx;  // > CustomCode.updatefunc:11
      ly1[i] = y1[i+1]-y1[i];  // > CustomCode.updatefunc:12
        // > CustomCode.updatefunc:13
      lx2[i] = dx;  // > CustomCode.updatefunc:14
      ly2[i] = y2[i+1]-y2[i];  // > CustomCode.updatefunc:15
        // > CustomCode.updatefunc:16
      lx[i] = dx;  // > CustomCode.updatefunc:17
      ly[i] = y[i+1]-y[i];  // > CustomCode.updatefunc:18
    }  // > CustomCode.updatefunc:19
  }  // > CustomCode.updatefunc:20

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    _view._update(); // make sure the functionField has the right value  // > Initialization.Init Page:1
    dx=(xmax-xmin)/(n-1);  // > Initialization.Init Page:2
    t = 0;  // > Initialization.Init Page:3
    updatefunc();  // > Initialization.Init Page:4
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    t = t+0.05;  // > Evolution.Evol Page:1
    updatefunc();  // > Evolution.Evol Page:2
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "Sim", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new ondas_plot_superposicao_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.pePlottingPanel.linkProperty("Title",  function() { return "t="+ _view._format(t,"0.0"); } ); // Sim linking property 'Title' for element 'pePlottingPanel'
          _view.segmentSet1.linkProperty("NumberOfElements",  function() { return n-1; } ); // Sim linking property 'NumberOfElements' for element 'segmentSet1'
          _view.segmentSet1.linkProperty("SizeX",  function() { return lx1; }, function(_v) { lx1 = _v; } ); // Sim linking property 'SizeX' for element 'segmentSet1'
          _view.segmentSet1.linkProperty("X",  function() { return x1; }, function(_v) { x1 = _v; } ); // Sim linking property 'X' for element 'segmentSet1'
          _view.segmentSet1.linkProperty("Y",  function() { return y1; }, function(_v) { y1 = _v; } ); // Sim linking property 'Y' for element 'segmentSet1'
          _view.segmentSet1.linkProperty("SizeY",  function() { return ly1; }, function(_v) { ly1 = _v; } ); // Sim linking property 'SizeY' for element 'segmentSet1'
          _view.segmentSet2.linkProperty("NumberOfElements",  function() { return n-1; } ); // Sim linking property 'NumberOfElements' for element 'segmentSet2'
          _view.segmentSet2.linkProperty("SizeX",  function() { return lx2; }, function(_v) { lx2 = _v; } ); // Sim linking property 'SizeX' for element 'segmentSet2'
          _view.segmentSet2.linkProperty("X",  function() { return x2; }, function(_v) { x2 = _v; } ); // Sim linking property 'X' for element 'segmentSet2'
          _view.segmentSet2.linkProperty("Y",  function() { return y2; }, function(_v) { y2 = _v; } ); // Sim linking property 'Y' for element 'segmentSet2'
          _view.segmentSet2.linkProperty("SizeY",  function() { return ly2; }, function(_v) { ly2 = _v; } ); // Sim linking property 'SizeY' for element 'segmentSet2'
          _view.segmentSet.linkProperty("NumberOfElements",  function() { return n-1; } ); // Sim linking property 'NumberOfElements' for element 'segmentSet'
          _view.segmentSet.linkProperty("SizeX",  function() { return lx; }, function(_v) { lx = _v; } ); // Sim linking property 'SizeX' for element 'segmentSet'
          _view.segmentSet.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // Sim linking property 'X' for element 'segmentSet'
          _view.segmentSet.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // Sim linking property 'Y' for element 'segmentSet'
          _view.segmentSet.linkProperty("SizeY",  function() { return ly; }, function(_v) { ly = _v; } ); // Sim linking property 'SizeY' for element 'segmentSet'
          _view.text.linkProperty("X",  function() { return xmin + 0.5*(xmax-xmin); } ); // Sim linking property 'X' for element 'text'
          _view.runPauseButton.setAction("OffClick", _pause); // Sim setting action 'OffClick' for element 'runPauseButton'
          _view.runPauseButton.linkProperty("State",  function() { return _isPaused; } ); // Sim linking property 'State' for element 'runPauseButton'
          _view.runPauseButton.setAction("OnClick", _play); // Sim setting action 'OnClick' for element 'runPauseButton'
          _view.stepButton.setAction("OnPress", _step); // Sim setting action 'OnPress' for element 'stepButton'
          _view.plotButton.setAction("OnClick", _initialize); // Sim setting action 'OnClick' for element 'plotButton'
          _view.resetButton.setAction("OnClick", _reset); // Sim setting action 'OnClick' for element 'resetButton'
          _view.functionField.linkProperty("Value",  function() { return functionString; }, function(_v) { functionString = _v; } ); // Sim linking property 'Value' for element 'functionField'
          _view.functionField.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // Sim setting action 'OnChange' for element 'functionField'
          _view.functionField2.linkProperty("Value",  function() { return functionString2; }, function(_v) { functionString2 = _v; } ); // Sim linking property 'Value' for element 'functionField2'
          _view.functionField2.setAction("OnChange", function(_data,_info) {
  _initialize();

}); // Sim setting action 'OnChange' for element 'functionField2'
          _view.xminField.linkProperty("Value",  function() { return xmin; }, function(_v) { xmin = _v; } ); // Sim linking property 'Value' for element 'xminField'
          _view.xminField.setAction("OnChange", _initialize); // Sim setting action 'OnChange' for element 'xminField'
          _view.xmaxField.linkProperty("Value",  function() { return xmax; }, function(_v) { xmax = _v; } ); // Sim linking property 'Value' for element 'xmaxField'
          _view.xmaxField.setAction("OnChange", _initialize); // Sim setting action 'OnChange' for element 'xmaxField'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(1);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function ondas_plot_superposicao_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = ondas_plot_superposicao_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function ondas_plot_superposicao_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"topPanel", _view._topFrame) // EJsS HtmlView.Sim: declaration of element 'topPanel'
      .setProperty("Html","<h2>Função de onda</h2>") // EJsS HtmlView.Sim: setting property 'Html' for element 'topPanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"pePanel", _view._topFrame) // EJsS HtmlView.Sim: declaration of element 'pePanel'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"peTopPanel", _view.pePanel) // EJsS HtmlView.Sim: declaration of element 'peTopPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"pePlottingPanel", _view.peTopPanel) // EJsS HtmlView.Sim: declaration of element 'pePlottingPanel'
      .setProperty("Height",400) // EJsS HtmlView.Sim: setting property 'Height' for element 'pePlottingPanel'
      .setProperty("Width",700) // EJsS HtmlView.Sim: setting property 'Width' for element 'pePlottingPanel'
      .setProperty("MinimumX",0) // EJsS HtmlView.Sim: setting property 'MinimumX' for element 'pePlottingPanel'
      .setProperty("MinimumY",-10) // EJsS HtmlView.Sim: setting property 'MinimumY' for element 'pePlottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.Sim: setting property 'AutoScaleY' for element 'pePlottingPanel'
      .setProperty("AutoScaleX",true) // EJsS HtmlView.Sim: setting property 'AutoScaleX' for element 'pePlottingPanel'
      .setProperty("MaximumY",10) // EJsS HtmlView.Sim: setting property 'MaximumY' for element 'pePlottingPanel'
      .setProperty("MaximumX",1) // EJsS HtmlView.Sim: setting property 'MaximumX' for element 'pePlottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"segmentSet1", _view.pePlottingPanel) // EJsS HtmlView.Sim: declaration of element 'segmentSet1'
      .setProperty("LineColor","Blue") // EJsS HtmlView.Sim: setting property 'LineColor' for element 'segmentSet1'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"segmentSet2", _view.pePlottingPanel) // EJsS HtmlView.Sim: declaration of element 'segmentSet2'
      .setProperty("LineColor","Red") // EJsS HtmlView.Sim: setting property 'LineColor' for element 'segmentSet2'
      ;

    _view._addElement(EJSS_DRAWING2D.segmentSet,"segmentSet", _view.pePlottingPanel) // EJsS HtmlView.Sim: declaration of element 'segmentSet'
      .setProperty("LineColor","rgba(0,128,0,1)") // EJsS HtmlView.Sim: setting property 'LineColor' for element 'segmentSet'
      .setProperty("LineWidth",2) // EJsS HtmlView.Sim: setting property 'LineWidth' for element 'segmentSet'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"text", _view.pePlottingPanel) // EJsS HtmlView.Sim: declaration of element 'text'
      .setProperty("OutlineColor","rgba(0,128,0,1)") // EJsS HtmlView.Sim: setting property 'OutlineColor' for element 'text'
      .setProperty("Y",9) // EJsS HtmlView.Sim: setting property 'Y' for element 'text'
      .setProperty("Text","y1(x,t)+y2(x,t)") // EJsS HtmlView.Sim: setting property 'Text' for element 'text'
      .setProperty("Font","normal normal 11px ") // EJsS HtmlView.Sim: setting property 'Font' for element 'text'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"peControlPanel", _view.pePanel) // EJsS HtmlView.Sim: declaration of element 'peControlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"runPauseButton", _view.peControlPanel) // EJsS HtmlView.Sim: declaration of element 'runPauseButton'
      .setProperty("ImageOnUrl","/org/opensourcephysics/resources/controls/images/play.gif") // EJsS HtmlView.Sim: setting property 'ImageOnUrl' for element 'runPauseButton'
      .setProperty("ImageOffUrl","/org/opensourcephysics/resources/controls/images/pause.gif") // EJsS HtmlView.Sim: setting property 'ImageOffUrl' for element 'runPauseButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"stepButton", _view.peControlPanel) // EJsS HtmlView.Sim: declaration of element 'stepButton'
      .setProperty("ImageUrl","/org/opensourcephysics/resources/controls/images/stepforward.gif") // EJsS HtmlView.Sim: setting property 'ImageUrl' for element 'stepButton'
      .setProperty("Text","") // EJsS HtmlView.Sim: setting property 'Text' for element 'stepButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"plotButton", _view.peControlPanel) // EJsS HtmlView.Sim: declaration of element 'plotButton'
      .setProperty("Tooltip","Initialize") // EJsS HtmlView.Sim: setting property 'Tooltip' for element 'plotButton'
      .setProperty("Text","Plot") // EJsS HtmlView.Sim: setting property 'Text' for element 'plotButton'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton", _view.peControlPanel) // EJsS HtmlView.Sim: declaration of element 'resetButton'
      .setProperty("Text","Reset") // EJsS HtmlView.Sim: setting property 'Text' for element 'resetButton'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"funcPanel", _view.pePanel) // EJsS HtmlView.Sim: declaration of element 'funcPanel'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"fxLabel", _view.funcPanel) // EJsS HtmlView.Sim: declaration of element 'fxLabel'
      .setProperty("TextAlign","right") // EJsS HtmlView.Sim: setting property 'TextAlign' for element 'fxLabel'
      .setProperty("Text","y1(x,t) =") // EJsS HtmlView.Sim: setting property 'Text' for element 'fxLabel'
      .setProperty("Font","normal normal 16px \"Lucida Console\", Monaco, monospace") // EJsS HtmlView.Sim: setting property 'Font' for element 'fxLabel'
      ;

    _view._addElement(EJSS_INTERFACE.functionField,"functionField", _view.funcPanel) // EJsS HtmlView.Sim: declaration of element 'functionField'
      .setProperty("Width",400) // EJsS HtmlView.Sim: setting property 'Width' for element 'functionField'
      .setProperty("Font","normal normal 16px ") // EJsS HtmlView.Sim: setting property 'Font' for element 'functionField'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"funcPanel2", _view.pePanel) // EJsS HtmlView.Sim: declaration of element 'funcPanel2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"fxLabel2", _view.funcPanel2) // EJsS HtmlView.Sim: declaration of element 'fxLabel2'
      .setProperty("TextAlign","right") // EJsS HtmlView.Sim: setting property 'TextAlign' for element 'fxLabel2'
      .setProperty("Text","y2(x,t) =") // EJsS HtmlView.Sim: setting property 'Text' for element 'fxLabel2'
      .setProperty("Font","normal normal 16px \"Lucida Console\", Monaco, monospace") // EJsS HtmlView.Sim: setting property 'Font' for element 'fxLabel2'
      ;

    _view._addElement(EJSS_INTERFACE.functionField,"functionField2", _view.funcPanel2) // EJsS HtmlView.Sim: declaration of element 'functionField2'
      .setProperty("Width",400) // EJsS HtmlView.Sim: setting property 'Width' for element 'functionField2'
      .setProperty("Font","normal normal 16px ") // EJsS HtmlView.Sim: setting property 'Font' for element 'functionField2'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"xlim", _view.pePanel) // EJsS HtmlView.Sim: declaration of element 'xlim'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"xminLabel", _view.xlim) // EJsS HtmlView.Sim: declaration of element 'xminLabel'
      .setProperty("Text","xmin =") // EJsS HtmlView.Sim: setting property 'Text' for element 'xminLabel'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"xminField", _view.xlim) // EJsS HtmlView.Sim: declaration of element 'xminField'
      .setProperty("Width",50) // EJsS HtmlView.Sim: setting property 'Width' for element 'xminField'
      .setProperty("Format","0.000") // EJsS HtmlView.Sim: setting property 'Format' for element 'xminField'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"xmaxLabel", _view.xlim) // EJsS HtmlView.Sim: declaration of element 'xmaxLabel'
      .setProperty("Text","xmax = ") // EJsS HtmlView.Sim: setting property 'Text' for element 'xmaxLabel'
      ;

    _view._addElement(EJSS_INTERFACE.numberField,"xmaxField", _view.xlim) // EJsS HtmlView.Sim: declaration of element 'xmaxField'
      .setProperty("Width",50) // EJsS HtmlView.Sim: setting property 'Width' for element 'xmaxField'
      .setProperty("Format","0.000") // EJsS HtmlView.Sim: setting property 'Format' for element 'xmaxField'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>
  <div id="metadata" class="metadata">
    <br />
    <div id="title_author">
      <hr />
      <b>Title and author:</b>
      <p>
      </p>
      <p>
 Author name
      </p>
    </div>
    <hr />
    <p></p>
    <div id="copyright_message">
      <div class="cc_left"  style="float:left">&#169; 2021, Author name. Compiled with EJS 6.01 (201013)
</div>
      <div class="cc_right" style="float:right">    Released under a <a rel="license" target="_blank" href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.en_US"> <img alt="Creative Commons Attribution-NonCommercial-ShareAlike" src="library/images/cc_icon.png" /> </a> license.</div>
    </div>
  </div>
    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () { 
          _model =  new ondas_plot_superposicao("_topFrame","library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
